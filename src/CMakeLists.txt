find_package(OpenCV REQUIRED)
find_package(CUDA REQUIRED)

include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${CUDA_INCLUDE_DIRS})

file(GLOB_RECURSE CURRENT_HEADERS  *.h *.hpp)
list(FILTER CURRENT_HEADERS EXCLUDE REGEX "CMakeFiles")

file(GLOB_RECURSE CURRENT_SOURCES  *.cpp)
list(FILTER CURRENT_SOURCES EXCLUDE REGEX "CMakeFiles")
list(REMOVE_ITEM CURRENT_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/HelloWorld.cpp)

file(GLOB_RECURSE CURRENT_CUDA_SOURCES  *.cu)
list(FILTER CURRENT_CUDA_SOURCES EXCLUDE REGEX "CMakeFiles")

source_group("Include" FILES ${CURRENT_HEADERS}) 
source_group("Source" FILES ${CURRENT_SOURCES})
source_group("CUDA" FILES ${CURRENT_CUDA_SOURCES})

if(NOT DEFINED CMAKE_CUDA_STANDARD)
    set(CMAKE_CUDA_STANDARD 14)
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)
endif()

set(CUDA_SEPARABLE_COMPILATION ON)

add_library(CVInCudaLib ${CURRENT_HEADERS} ${CURRENT_SOURCES} ${CURRENT_CUDA_SOURCES})
# Set CUDA_ARCHITECTURES property after the target is created
set_property(TARGET CVInCudaLib PROPERTY CUDA_ARCHITECTURES OFF)
target_link_libraries(CVInCudaLib ${OpenCV_LIBS} ${CUDA_LIBRARIES})

add_executable(CVInCuda ${CMAKE_CURRENT_SOURCE_DIR}/HelloWorld.cpp)
target_link_libraries(CVInCuda CVInCudaLib)